<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-08-09T19:18:42+00:00</updated><id>/feed.xml</id><title type="html">some random rants</title><subtitle>我的学习记录</subtitle><entry><title type="html">longjmp 和 setcontext</title><link href="/parallel/2020/08/09/setjmp-setcontext.html" rel="alternate" type="text/html" title="longjmp 和 setcontext" /><published>2020-08-09T07:11:43+00:00</published><updated>2020-08-09T07:11:43+00:00</updated><id>/parallel/2020/08/09/setjmp-setcontext</id><content type="html" xml:base="/parallel/2020/08/09/setjmp-setcontext.html">&lt;p&gt;这篇文章起源于 seastar-devel 上的一个&lt;a href=&quot;https://groups.google.com/g/seastar-dev/c/ncjU57iz7uk/m/7zye5ujiDAAJ&quot;&gt;讨论&lt;/a&gt;。在开始之前，我们先说一下协程的背景。
没有特殊说明的话，下面都以 amd64 和现代的 Linux 为例。&lt;/p&gt;

&lt;h2 id=&quot;协程的由来&quot;&gt;协程的由来&lt;/h2&gt;

&lt;p&gt;coroutine 或者 cooperative threads，中文常常叫协程。在 Linux 里面，常规的调度单位是 LWP (light weight process)。 NPTL 实现下，LWP 和用户线程在数量上是一对一的对应关系。所以，以 Linux 为例，有这么几个问题:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;缺省 8MB 的栈空间。虽然 8M 只是虚拟地址的空间，但是内核里面在分配栈空间的时候必须立即分配对应的页表，这个开销是无法避免的。&lt;/li&gt;
  &lt;li&gt;线程调度的时候必须借助内核。换言之，上下文切换也会引起一些开销。&lt;/li&gt;
  &lt;li&gt;因为内核调度线程的不可预期性，比如一个线程把自己的时间片用完了。内核可能会把它调度出去，把另一个就绪的任务换进来。为了保证数据和逻辑的一致性，在一些可能产生 racing 的地方，必须加锁。而锁的引入进一步影响了性能和并发的粒度。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以为了避免这些问题，我们引入了协程的概念，在用户态实现 m:n 的映射。让线程自己调度自己。正是因为这种用户态线程是互相协作的，只有当一个线程主动把 CPU 让出来，另一个已经就绪的线程才能继续运行。这也是为什么协程叫做“协程”的原因。&lt;/p&gt;

&lt;h2 id=&quot;协程的基本要素&quot;&gt;协程的基本要素&lt;/h2&gt;

&lt;p&gt;协程要能自己调度自己，需要满足下面几个要求&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;协程在让出 CPU 的时候，需要保存现场。这样当它以后继续执行的时候，能记得起来之前在做什么，然后继续当时未完成的任务。&lt;/li&gt;
  &lt;li&gt;协程在让出 CPU 的时候，能找到另外一个就绪的协程，恢复它当初保存的现场。帮助它回忆起来之前的事情。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这有点像晚上睡前看完书的时候，大家会在书里面夹一个书签，记住看到哪一页了。下次再翻开书的时候，找到书签的位置就能从上次停下来的地方继续看。只不过一个系统里面可能会有成百上千个线程，每个线程都有自己的“书签”。一般来说，协程库提供两个基本的操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;yield / swap out: 把控制权让出来，保存自己的状态。也就是插书签。&lt;/li&gt;
  &lt;li&gt;resume / swap in: 获取控制权，恢复自己的状态。也就是根据书签的位置，继续读书。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;协程的实现&quot;&gt;协程的实现&lt;/h2&gt;

&lt;h3 id=&quot;书签和上下文&quot;&gt;书签和上下文&lt;/h3&gt;

&lt;p&gt;书签保存的信息只有一个页码。但是对于一个线程来说，它在 CPU 上执行的状态对应着更多的信息。我们先看一个特例————子函数的调用。假设我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; 里面调用之前定义的函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func()&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func()&lt;/code&gt; 返回时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; 能继续它当时未尽的事业，很明显，它需要&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在跳转到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func()&lt;/code&gt; 的起始地址之前，保存当下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;再把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt; 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func()&lt;/code&gt; 的地址。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func()&lt;/code&gt; 在返回的时候，需要把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt; 恢复成之前保存的 版本。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;x86 很贴心的提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RET&lt;/code&gt; 两个指令。前者把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt; 压栈，再根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL&lt;/code&gt; 的参数更新 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt;。要是大家还能回忆相对寻址、绝对寻址的话，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL&lt;/code&gt; 是支持这些寻址方式的。要是目标地址不在一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cs&lt;/code&gt; 段，它还能把当前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cs&lt;/code&gt; 也一并保存了。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RET&lt;/code&gt; 执行的是相反的功能。它把栈上的地址恢复回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cs&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt;，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RET&lt;/code&gt; 还有参数的话，还顺带着把栈上的垃圾清理一下，也就是退栈。通常来说，调用方会把一些参数放到栈上，而参数的个数一般是确定的。所以被调用方在返回的时候，把那些参数从栈上清除也是理所当然的事情。&lt;/p&gt;

&lt;p&gt;可以说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RET&lt;/code&gt; 给了线程订了一张往返票，让它从一个地方走到另外一个地方出个差，然后再回来。 除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ip&lt;/code&gt;，根据 x86-64 的调用规范，在函数调用的时候，下面的寄存器是调用方负责的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;​&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rax&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;​&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rcx​&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;​%rdx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;​%rdi&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;​%rsi&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r8&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;换句话说，如果调用方觉得它无所谓函数返回之后这些寄存器的状态是否改变了，那么它完全可以选择不保存它们。其中，函数调用的前六个参数保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rdi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rsi&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rdx&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rcx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r8d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r9d&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而被调用方则有义务保存：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rsp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r12&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r15&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是说，在函数返回之后，这些寄存器的值应该保持不变。这些要求定义了一个函数调用的行为规范，确保编译器能编译出有效率的代码，而不用花时间分析被调用的函数到底修改了哪些寄存器。所以一般来说，我们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt; 实现也应该遵守这些基本的规范，保证调用方行为不受到干扰。&lt;/p&gt;

&lt;p&gt;那么从一个线程到另外一个线程呢？除了函数调用规范要求的那些寄存器，还有哪些状态需要保存呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man7/pthreads.7.html&quot;&gt;pthread(7)&lt;/a&gt; 总结了一下。它说，POSIX.1 要求一个进程里面的线程有共同的一系列属性，比如说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process ID&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uid&lt;/code&gt;、文件描述符以及 signal handler。它们也有自己的独立的属性，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errno&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signalprocmask&lt;/code&gt; 还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigaltstack&lt;/code&gt;。这些属性有着各自不同的实现方式。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errno&lt;/code&gt; 它是 libc 实现的接口，让 libc 的函数能告诉调用方具体的错误号。 libc 一般把它保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%fs&lt;/code&gt; 段里面。但是如果我们不需要:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; int ret  = fstat(...);
 yield_to(another_thread);
 if (ret != 0) {
   perror(&quot;fstat failed&quot;);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;那么就没有必要保存和恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errno&lt;/code&gt; 了。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigprocmask&lt;/code&gt; 如果调度的线程 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_sigmask.html&quot;&gt;sigmask&lt;/a&gt; 不一样，那么我们的确需要保存恢复它们各自的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigprocmask&lt;/code&gt;。但是如果它们的 sigmask 都一样的话，就可以不用管这个属性了。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigaltstack&lt;/code&gt; 也是类似的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数调用使用栈来保存返回地址，传递一些参数。而每个线程都有自己的栈。在切换线程的时候，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rsp&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbp&lt;/code&gt; 也需要指向新的线程自己的栈。&lt;/li&gt;
  &lt;li&gt;浮点处理器的运行环境。这包括一系列寄存器。可以参考 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FSTENV&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLDENV&lt;/code&gt; 这两个指令。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libc-的书签&quot;&gt;libc 的书签&lt;/h3&gt;

&lt;p&gt;我们管这些林林总总的状态叫做“上下文”。 为了保存和恢复上下文，libc 提供了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 保存当前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r13&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r14&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r15&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rsp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rip&lt;/code&gt; 到指定的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt; 中。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 从指定的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt; 恢复 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rbp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r13&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r14&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%r15&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%rsp&lt;/code&gt; 中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以参考 &lt;a href=&quot;http://git.musl-libc.org/cgit/musl/tree/src/setjmp/x86_64/setjmp.s&quot;&gt;musl-libc 的实现&lt;/a&gt;。可以说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 是相当简练的。只提供了两个功能，一个是记录当前的位置，另一个是跳转到指定的位置。&lt;/p&gt;

&lt;h3 id=&quot;libc-的-context&quot;&gt;libc 的 context&lt;/h3&gt;

&lt;p&gt;虽然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 很简练。但是它们只能允许我们回到一个已知的地方。这和之前书签的例子很像，如果之前没有用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 得到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt;，那么是无法跳转到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt; 指示的地方的。如果我们希望实现协程的话。假设我们一开始启动了一个 POSIX 线程，当这个线程执行的函数希望 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt;，把执行权交给另一个任务，而这个任务还从没执行过。那么 不手动修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt; 是无法实现这个功能的。读者可能会说，如果开始这个新任务的函数之前执行过，那么是不是在函数开始的时候用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt;加个书签就可以了呢？这样会导致两个协程互相重用一个栈，导致原来的线程在返回时可能会读到错误的数据，也可能干脆跑飞掉。&lt;/p&gt;

&lt;p&gt;所以 glibc 干脆提供了下面这几个函数:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getcontext(ucontext_t *ucp);
int setcontext(const ucontext_t *ucp);
void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);
int swapcontext(ucontext_t *oucp, const ucontext_t *ucp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提供了比 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 更强大的功能。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getcontext()&lt;/code&gt; 记录当前的上下文。这个上下文可以作为一个模板，如果我们需要让它使用另一个栈，没问题！如果我们想让调度它的时候，运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve_request()&lt;/code&gt;，好的！对了，这个函数还应该有几个参数，嗯，我想在这里设置这些参数……当然可以！这些函数满足了用户对协程的所有要求。但是它们也带来了一些问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;过于完整的线程支持。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setcontext()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swapcontext()&lt;/code&gt; 除了做了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 的工作，还：
    &lt;ul&gt;
      &lt;li&gt;用系统调用设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigprocmask&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%fs&lt;/code&gt;，这是段寄存器。TLS 的变量都保存在这里面。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不跨平台。&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/009695399/functions/getcontext.html&quot;&gt;POSIX.1&lt;/a&gt; 已经把这几个函数去掉了。musl-libc 干脆不实现他们。&lt;/li&gt;
  &lt;li&gt;把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; 串起来。调用当初设置的函数，要是执行完了，看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uc_link&lt;/code&gt;，要是还有下一个 context。有的话，再调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setcontext()&lt;/code&gt;，开始执行它。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seastar-的-thread&quot;&gt;Seastar 的 thread&lt;/h3&gt;

&lt;p&gt;Seastar 为了避免使用重量级的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swapcontext()&lt;/code&gt; 进行上下文切换，只是在开始的时候用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getcontext()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makecontext()&lt;/code&gt; 来初始化 context，而在平时调度的时候继续用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp()&lt;/code&gt; 的组合。&lt;/p&gt;

&lt;p&gt;首先，每个用户态线程都有自己的 context，这个 context 包含&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个 128KB 的栈&lt;/li&gt;
  &lt;li&gt;一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;指向原来的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; 的指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这里，ucontext 就像是一个通向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp_buf&lt;/code&gt; 的跳板。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在初始化用户态线程的时候，Seastar 新建一个 ucontext，让它使用自己的栈，并把它指向一个静态函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s_main()&lt;/code&gt;，这个函数的参数其实就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_context&lt;/code&gt; 的地址，所以它得以调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this-&amp;gt;main()&lt;/code&gt;。后者才会调用真正的任务函数。&lt;/li&gt;
  &lt;li&gt;每个线程都用 TLS 保存着自己的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_context&lt;/code&gt; ，在工作线程调度到新的任务的时候，新的任务对应着新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_context&lt;/code&gt; 实例。在这个新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_context&lt;/code&gt; 开始运行之前，我们把当前的 context 作为成员变量保存在新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_context&lt;/code&gt; 里面。然后用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp()&lt;/code&gt; 把当前上下文保存在原来的 context 中。这时保存了原来 context 的上下文。&lt;/li&gt;
  &lt;li&gt;不过我们并不保存这个新建的 ucontext，我们的目标是调度到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this-&amp;gt;main()&lt;/code&gt;。接下来用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setcontext()&lt;/code&gt; 跳转到这个 ucontext 完成调度。&lt;/li&gt;
  &lt;li&gt;下一次要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt; 就简单很多，只需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp(this-&amp;gt;jmpbuf)&lt;/code&gt;，然后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp(link-&amp;gt;jmpbuf)&lt;/code&gt; 就行了。&lt;/li&gt;
  &lt;li&gt;类似的，如果是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume&lt;/code&gt;，则是相反的操作。&lt;/li&gt;
  &lt;li&gt;如果希望销毁这个用户态线程，则直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp(link-&amp;gt;jmpbuf)&lt;/code&gt; 。跳过保留上下文的步骤。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="parallel" /><summary type="html">这篇文章起源于 seastar-devel 上的一个讨论。在开始之前，我们先说一下协程的背景。 没有特殊说明的话，下面都以 amd64 和现代的 Linux 为例。</summary></entry><entry><title type="html">开场白</title><link href="/misc/2020/08/08/hello-world.html" rel="alternate" type="text/html" title="开场白" /><published>2020-08-08T05:10:10+00:00</published><updated>2020-08-08T05:10:10+00:00</updated><id>/misc/2020/08/08/hello-world</id><content type="html" xml:base="/misc/2020/08/08/hello-world.html">&lt;p&gt;为了记录，也为了提高自己，写个 blog。&lt;/p&gt;</content><author><name></name></author><category term="misc" /><summary type="html">为了记录，也为了提高自己，写个 blog。</summary></entry></feed>