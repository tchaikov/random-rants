<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.6.1 -->
<title>longjmp 和 setcontext | some random rants</title>
<meta name="generator" content="Jekyll v4.1.1" />
<meta property="og:title" content="longjmp 和 setcontext" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="这篇文章起源于 seastar-devel 上的一个讨论。在开始之前，我们先说一下协程的背景。 因为讨论涉及特定的操作系统、处理器系统架构以及调用约定，如果没有特殊说明的话，下面都以 sysv, amd64 和现代的 Linux 为例。" />
<meta property="og:description" content="这篇文章起源于 seastar-devel 上的一个讨论。在开始之前，我们先说一下协程的背景。 因为讨论涉及特定的操作系统、处理器系统架构以及调用约定，如果没有特殊说明的话，下面都以 sysv, amd64 和现代的 Linux 为例。" />
<link rel="canonical" href="https://blog.k3fu.xyz/x86/2020/08/09/setjmp-setcontext.html" />
<meta property="og:url" content="https://blog.k3fu.xyz/x86/2020/08/09/setjmp-setcontext.html" />
<meta property="og:site_name" content="some random rants" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2020-08-09T07:11:43+00:00" />
<script type="application/ld+json">
{"datePublished":"2020-08-09T07:11:43+00:00","@type":"BlogPosting","mainEntityOfPage":{"@type":"WebPage","@id":"https://blog.k3fu.xyz/x86/2020/08/09/setjmp-setcontext.html"},"description":"这篇文章起源于 seastar-devel 上的一个讨论。在开始之前，我们先说一下协程的背景。 因为讨论涉及特定的操作系统、处理器系统架构以及调用约定，如果没有特殊说明的话，下面都以 sysv, amd64 和现代的 Linux 为例。","headline":"longjmp 和 setcontext","dateModified":"2020-08-09T07:11:43+00:00","url":"https://blog.k3fu.xyz/x86/2020/08/09/setjmp-setcontext.html","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="https://blog.k3fu.xyz/feed.xml" title="some random rants" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">some random rants</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">longjmp 和 setcontext</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2020-08-09T07:11:43+00:00" itemprop="datePublished">Aug 9, 2020
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <p>这篇文章起源于 seastar-devel 上的一个<a href="https://groups.google.com/g/seastar-dev/c/ncjU57iz7uk/m/7zye5ujiDAAJ">讨论</a>。在开始之前，我们先说一下协程的背景。
因为讨论涉及特定的操作系统、处理器系统架构以及调用约定，如果没有特殊说明的话，下面都以 sysv, amd64 和现代的 Linux 为例。</p>

<h2 id="协程的由来">协程的由来</h2>

<p>coroutine 或者 cooperative threads，中文常常叫协程。在 Linux 里面，常规的调度单位是 LWP (light weight process)。 NPTL 实现下，LWP 和用户线程在数量上是一对一的对应关系。所以，以 Linux 为例，有这么几个问题:</p>

<ul>
  <li>缺省 8MB 的栈空间。虽然 8M 只是虚拟地址的空间，但是内核里面在分配栈空间的时候必须立即分配对应的页表，这个开销是无法避免的。</li>
  <li>线程调度的时候必须借助内核。换言之，上下文切换也会引起一些开销。</li>
  <li>因为内核调度线程的不可预期性，比如一个线程把自己的时间片用完了。内核可能会把它调度出去，把另一个就绪的任务换进来。为了保证数据和逻辑的一致性，在一些可能产生 racing 的地方，必须加锁。而锁的引入进一步影响了性能和并发的粒度。</li>
</ul>

<p>所以为了避免这些问题，我们引入了协程的概念，在用户态实现 m:n 的映射。让线程自己调度自己。正是因为这种用户态线程是互相协作的，只有当一个线程主动把 CPU 让出来，另一个已经就绪的线程才能继续运行。这也是为什么协程叫做“协程”的原因。</p>

<h2 id="协程的基本要素">协程的基本要素</h2>

<p>协程要能自己调度自己，需要满足下面几个要求</p>

<ol>
  <li>协程在让出 CPU 的时候，需要保存现场。这样当它以后继续执行的时候，能记得起来之前在做什么，然后继续当时未完成的任务。</li>
  <li>协程在让出 CPU 的时候，能找到另外一个就绪的协程，恢复它当初保存的现场。帮助它回忆起来之前的事情。</li>
</ol>

<p>这有点像晚上睡前看完书的时候，大家会在书里面夹一个书签，记住看到哪一页了。下次再翻开书的时候，找到书签的位置就能从上次停下来的地方继续看。只不过一个系统里面可能会有成百上千个线程，每个线程都有自己的“书签”。一般来说，协程库提供两个基本的操作：</p>

<ol>
  <li>yield / swap out: 把控制权让出来，保存自己的状态。也就是插书签。</li>
  <li>resume / swap in: 获取控制权，恢复自己的状态。也就是根据书签的位置，继续读书。</li>
</ol>

<h2 id="协程的实现">协程的实现</h2>

<h3 id="书签和上下文">书签和上下文</h3>

<p>书签保存的信息只有一个页码。但是对于一个线程来说，它在 CPU 上执行的状态对应着更多的信息。我们先看一个特例————子函数的调用。假设我们在 <code class="language-plaintext highlighter-rouge">main()</code> 里面调用之前定义的函数 <code class="language-plaintext highlighter-rouge">func()</code>。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">func</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>为了让 <code class="language-plaintext highlighter-rouge">func()</code> 返回时，<code class="language-plaintext highlighter-rouge">main()</code> 能继续它当时未尽的事业，很明显，它需要</p>

<ol>
  <li>在跳转到 <code class="language-plaintext highlighter-rouge">func()</code> 的起始地址之前，保存当下的 <code class="language-plaintext highlighter-rouge">%ip</code>。</li>
  <li>再把 <code class="language-plaintext highlighter-rouge">%ip</code> 改成 <code class="language-plaintext highlighter-rouge">func()</code> 的地址。</li>
  <li><code class="language-plaintext highlighter-rouge">func()</code> 在返回的时候，需要把 <code class="language-plaintext highlighter-rouge">%ip</code> 恢复成之前保存的 版本。</li>
</ol>

<p>x86 很贴心的提供了 <code class="language-plaintext highlighter-rouge">CALL</code> 和 <code class="language-plaintext highlighter-rouge">RET</code> 两个指令。前者把 <code class="language-plaintext highlighter-rouge">%ip</code> 压栈，再根据 <code class="language-plaintext highlighter-rouge">CALL</code> 的参数更新 <code class="language-plaintext highlighter-rouge">%ip</code>。要是大家还能回忆相对寻址、绝对寻址的话，<code class="language-plaintext highlighter-rouge">CALL</code> 是支持这些寻址方式的。要是目标地址不在一个 <code class="language-plaintext highlighter-rouge">%cs</code> 段，它还能把当前 <code class="language-plaintext highlighter-rouge">%cs</code> 也一并保存了。<code class="language-plaintext highlighter-rouge">RET</code> 执行的是相反的功能。它把栈上的地址恢复回 <code class="language-plaintext highlighter-rouge">%cs</code> 和 <code class="language-plaintext highlighter-rouge">%ip</code>，如果 <code class="language-plaintext highlighter-rouge">RET</code> 还有参数的话，还顺带着把栈上的垃圾清理一下，也就是退栈。通常来说，调用方会把一些参数放到栈上，而参数的个数一般是确定的。所以被调用方在返回的时候，把那些参数从栈上清除也是理所当然的事情。</p>

<p>可以说 <code class="language-plaintext highlighter-rouge">CALL</code> 和 <code class="language-plaintext highlighter-rouge">RET</code> 给了线程订了一张往返票，让它从一个地方走到另外一个地方出个差，然后再回来。 除了 <code class="language-plaintext highlighter-rouge">%ip</code>，根据 amd64 或者 x86-64 的 ABI 调用规范，在函数调用的时候，下面的寄存器是调用方负责的:</p>

<ul>
  <li>​<code class="language-plaintext highlighter-rouge">%rax</code></li>
  <li>​<code class="language-plaintext highlighter-rouge">%rcx​</code></li>
  <li><code class="language-plaintext highlighter-rouge">​%rdx</code></li>
  <li><code class="language-plaintext highlighter-rouge">%rdi</code></li>
  <li><code class="language-plaintext highlighter-rouge">%rsi</code></li>
  <li><code class="language-plaintext highlighter-rouge">%r8</code> 到 <code class="language-plaintext highlighter-rouge">%r11</code></li>
</ul>

<p>换句话说，如果调用方觉得它无所谓函数返回之后这些寄存器的状态是否改变了，那么它完全可以选择不保存它们。其中，函数调用的前六个参数保存在 <code class="language-plaintext highlighter-rouge">%rdi</code>, <code class="language-plaintext highlighter-rouge">%rsi</code>，<code class="language-plaintext highlighter-rouge">%rdx</code>，<code class="language-plaintext highlighter-rouge">%rcx</code>, <code class="language-plaintext highlighter-rouge">%r8d</code>, <code class="language-plaintext highlighter-rouge">%r9d</code>。</p>

<p>而被调用方则有义务保存：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">%rbx</code></li>
  <li><code class="language-plaintext highlighter-rouge">%rbp</code></li>
  <li><code class="language-plaintext highlighter-rouge">%rsp</code></li>
  <li><code class="language-plaintext highlighter-rouge">%r12</code> 到 <code class="language-plaintext highlighter-rouge">%r15</code></li>
</ul>

<p>也就是说，在函数返回之后，这些寄存器的值应该保持不变。这些要求定义了一个函数调用的行为规范，确保编译器能编译出有效率的代码，而不用花时间分析被调用的函数到底修改了哪些寄存器。所以一般来说，我们的 <code class="language-plaintext highlighter-rouge">yield</code> 实现也应该遵守这些基本的规范，保证调用方行为不受到干扰。</p>

<p>那么从一个线程到另外一个线程呢？除了函数调用规范要求的那些寄存器，还有哪些状态需要保存呢？</p>

<ul>
  <li>
    <p><a href="http://man7.org/linux/man-pages/man7/pthreads.7.html">pthread(7)</a> 总结了一下。它说，POSIX.1 要求一个进程里面的线程有共同的一系列属性，比如说 <code class="language-plaintext highlighter-rouge">process ID</code>、<code class="language-plaintext highlighter-rouge">uid</code>、文件描述符以及 signal handler。它们也有自己的独立的属性，比如 <code class="language-plaintext highlighter-rouge">errno</code>、<code class="language-plaintext highlighter-rouge">signalprocmask</code> 还有 <code class="language-plaintext highlighter-rouge">sigaltstack</code>。这些属性有着各自不同的实现方式。</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">errno</code> 它是 libc 实现的接口，让 libc 的函数能告诉调用方具体的错误号。 libc 一般把它保存在 <code class="language-plaintext highlighter-rouge">%fs</code> 段里面。但是如果我们不需要:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> int ret  = fstat(...);
 yield_to(another_thread);
 if (ret != 0) {
   perror("fstat failed");
 }
</code></pre></div>        </div>
        <p>那么就没有必要保存和恢复 <code class="language-plaintext highlighter-rouge">errno</code> 了。</p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">sigprocmask</code> 如果调度的线程 <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_sigmask.html">sigmask</a> 不一样，那么我们的确需要保存恢复它们各自的 <code class="language-plaintext highlighter-rouge">sigprocmask</code>。但是如果它们的 sigmask 都一样的话，就可以不用管这个属性了。<code class="language-plaintext highlighter-rouge">sigaltstack</code> 也是类似的。</li>
    </ul>
  </li>
  <li>函数调用使用栈来保存返回地址，传递一些参数。而每个线程都有自己的栈。在切换线程的时候，<code class="language-plaintext highlighter-rouge">%rsp</code> 和 <code class="language-plaintext highlighter-rouge">%rbp</code> 也需要指向新的线程自己的栈。</li>
  <li>浮点处理器的运行环境。这包括一系列寄存器。可以参考 <code class="language-plaintext highlighter-rouge">FSTENV</code> 和 <code class="language-plaintext highlighter-rouge">FLDENV</code> 这两个指令。</li>
</ul>

<h3 id="libc-的书签">libc 的书签</h3>

<p>我们管这些林林总总的状态叫做“上下文”。 为了保存和恢复上下文，libc 提供了</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setjmp()</code> 保存当前的 <code class="language-plaintext highlighter-rouge">%rbx</code>, <code class="language-plaintext highlighter-rouge">%rbp</code>, <code class="language-plaintext highlighter-rouge">%r12</code>, <code class="language-plaintext highlighter-rouge">%r13</code>, <code class="language-plaintext highlighter-rouge">%r14</code>, <code class="language-plaintext highlighter-rouge">%r15</code>, <code class="language-plaintext highlighter-rouge">%rsp</code>, <code class="language-plaintext highlighter-rouge">%rip</code> 到指定的 <code class="language-plaintext highlighter-rouge">jmp_buf</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">longjmp()</code> 从指定的 <code class="language-plaintext highlighter-rouge">jmp_buf</code> 恢复 <code class="language-plaintext highlighter-rouge">%rbx</code>, <code class="language-plaintext highlighter-rouge">%rbp</code>, <code class="language-plaintext highlighter-rouge">%r12</code>, <code class="language-plaintext highlighter-rouge">%r13</code>, <code class="language-plaintext highlighter-rouge">%r14</code>, <code class="language-plaintext highlighter-rouge">%r15</code>, <code class="language-plaintext highlighter-rouge">%rsp</code> 中。</li>
</ul>

<p>可以参考 <a href="http://git.musl-libc.org/cgit/musl/tree/src/setjmp/x86_64/setjmp.s">musl-libc 的实现</a>。可以说 <code class="language-plaintext highlighter-rouge">setjmp()</code> 和 <code class="language-plaintext highlighter-rouge">longjmp()</code> 是相当简练的。只提供了两个功能，一个是记录当前的位置，另一个是跳转到指定的位置。</p>

<p>但是 <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=setjmp/longjmp.c;h=686ab1964b4cf5848cd7505d6ca2c00dce5722aa;hb=HEAD">glibc 的 longjmp</a> 还更啰嗦一些，它在调用平台相关的<code class="language-plaintext highlighter-rouge">__longjmp()</code>之前，还调用了</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">_longjmp_unwind()</code></li>
  <li><code class="language-plaintext highlighter-rouge">__sigprocmask()</code></li>
</ol>

<h3 id="libc-的-context">libc 的 context</h3>

<p>虽然 <code class="language-plaintext highlighter-rouge">setjmp()</code> 和 <code class="language-plaintext highlighter-rouge">longjmp()</code> 很简练。但是它们只能允许我们回到一个已知的地方。这和之前书签的例子很像，如果之前没有用 <code class="language-plaintext highlighter-rouge">setjmp()</code> 得到 <code class="language-plaintext highlighter-rouge">jmp_buf</code>，那么是无法跳转到 <code class="language-plaintext highlighter-rouge">jmp_buf</code> 指示的地方的。如果我们希望实现协程的话。假设我们一开始启动了一个 POSIX 线程，当这个线程执行的函数希望 <code class="language-plaintext highlighter-rouge">yield</code>，把执行权交给另一个任务，而这个任务还从没执行过。那么 不手动修改<code class="language-plaintext highlighter-rouge">jmp_buf</code> 是无法实现这个功能的。读者可能会说，如果开始这个新任务的函数之前执行过，那么是不是在函数开始的时候用 <code class="language-plaintext highlighter-rouge">setjmp()</code>加个书签就可以了呢？这样会导致两个协程互相重用一个栈，导致原来的线程在返回时可能会读到错误的数据，也可能干脆跑飞掉。</p>

<p>所以 glibc 干脆提供了下面这几个函数:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int getcontext(ucontext_t *ucp);
int setcontext(const ucontext_t *ucp);
void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);
int swapcontext(ucontext_t *oucp, const ucontext_t *ucp);
</code></pre></div></div>

<p>提供了比 <code class="language-plaintext highlighter-rouge">setjmp()</code> 和 <code class="language-plaintext highlighter-rouge">longjmp()</code> 更强大的功能。</p>

<p><code class="language-plaintext highlighter-rouge">getcontext()</code> 记录当前的上下文。这个上下文可以作为一个模板，如果我们需要让它使用另一个栈，没问题！如果我们想让调度它的时候，运行 <code class="language-plaintext highlighter-rouge">serve_request()</code>，好的！对了，这个函数还应该有几个参数，嗯，我想在这里设置这些参数……当然可以！这些函数满足了用户对协程的所有要求。但是它们也带来了一些问题</p>

<ul>
  <li>过于完整的线程支持。<code class="language-plaintext highlighter-rouge">setcontext()</code> 和 <code class="language-plaintext highlighter-rouge">swapcontext()</code> 除了做了 <code class="language-plaintext highlighter-rouge">longjmp()</code> 的工作，还：
    <ul>
      <li>用系统调用设置 <code class="language-plaintext highlighter-rouge">sigprocmask</code></li>
      <li>设置 <code class="language-plaintext highlighter-rouge">%fs</code>，这是段寄存器。TLS 的变量都保存在这里面。</li>
    </ul>
  </li>
  <li>不跨平台。<a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/getcontext.html">POSIX.1</a> 已经把这几个函数去掉了。musl-libc 干脆[12][不实现他们]。</li>
  <li>把 <code class="language-plaintext highlighter-rouge">context</code> 串起来。调用当初设置的函数，要是执行完了，看看 <code class="language-plaintext highlighter-rouge">uc_link</code>，要是还有下一个 context。有的话，再调用 <code class="language-plaintext highlighter-rouge">setcontext()</code>，开始执行它。</li>
</ul>

<h3 id="seastar-的-thread">Seastar 的 thread</h3>

<p>Seastar 为了避免使用重量级的 <code class="language-plaintext highlighter-rouge">swapcontext()</code> 进行上下文切换，只是在开始的时候用 <code class="language-plaintext highlighter-rouge">getcontext()</code> 和 <code class="language-plaintext highlighter-rouge">makecontext()</code> 来初始化 context，而在平时调度的时候继续用 <code class="language-plaintext highlighter-rouge">setjmp()</code> 和 <code class="language-plaintext highlighter-rouge">longjmp()</code> 的组合。</p>

<p>首先，每个用户态线程都有自己的 context，这个 context 包含</p>

<ul>
  <li>一个 128KB 的栈</li>
  <li>一个 <code class="language-plaintext highlighter-rouge">jmp_buf</code></li>
  <li>指向原来的 <code class="language-plaintext highlighter-rouge">context</code> 的指针</li>
</ul>

<p>在这里，ucontext 就像是一个通向 <code class="language-plaintext highlighter-rouge">jmp_buf</code> 的跳板。</p>

<ol>
  <li>在初始化用户态线程的时候，Seastar 新建一个 ucontext，让它使用自己的栈，并把它指向一个静态函数 <code class="language-plaintext highlighter-rouge">s_main()</code>，这个函数的参数其实就是 <code class="language-plaintext highlighter-rouge">thread_context</code> 的地址，所以它得以调用 <code class="language-plaintext highlighter-rouge">this-&gt;main()</code>。后者才会调用真正的任务函数。</li>
  <li>每个线程都用 TLS 保存着自己的 <code class="language-plaintext highlighter-rouge">thread_context</code> ，在工作线程调度到新的任务的时候，新的任务对应着新的 <code class="language-plaintext highlighter-rouge">thread_context</code> 实例。在这个新的 <code class="language-plaintext highlighter-rouge">thread_context</code> 开始运行之前，我们把当前的 context 作为成员变量保存在新的 <code class="language-plaintext highlighter-rouge">thread_context</code> 里面。然后用 <code class="language-plaintext highlighter-rouge">setjmp()</code> 把当前上下文保存在原来的 context 中。这时保存了原来 context 的上下文。</li>
  <li>不过我们并不保存这个新建的 ucontext，我们的目标是调度到 <code class="language-plaintext highlighter-rouge">this-&gt;main()</code>。接下来用 <code class="language-plaintext highlighter-rouge">setcontext()</code> 跳转到这个 ucontext 完成调度。</li>
  <li>下一次要 <code class="language-plaintext highlighter-rouge">yield</code> 就简单很多，只需要 <code class="language-plaintext highlighter-rouge">setjmp(this-&gt;jmpbuf)</code>，然后 <code class="language-plaintext highlighter-rouge">longjmp(link-&gt;jmpbuf)</code> 就行了。</li>
  <li>类似的，如果是 <code class="language-plaintext highlighter-rouge">resume</code>，则是相反的操作。</li>
  <li>如果希望销毁这个用户态线程，则直接 <code class="language-plaintext highlighter-rouge">longjmp(link-&gt;jmpbuf)</code> 。跳过保留上下文的步骤。</li>
</ol>

<h3 id="boostcontext">Boost::context</h3>

<p><code class="language-plaintext highlighter-rouge">Boost::context</code> 用汇编实现了平台相关的 <code class="language-plaintext highlighter-rouge">fcontext_t</code> ，它的性能据说比 <code class="language-plaintext highlighter-rouge">ucontext_</code> <a href="https://www.boost.org/doc/libs/1_73_0/libs/context/doc/html/context/performance.html">高一到两个数量级</a> 。<code class="language-plaintext highlighter-rouge">fcontext_</code> <a href="https://github.com/boostorg/context/blob/7c481a8fb6db3a3b6c981e7b27f02064d1efb499/src/asm/jump_x86_64_sysv_elf_gas.S">保存的上下文</a> 有</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MXCSR</code> 中的控制字。x86 上 <a href="https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol1/o_7281d5ea06a5b67a-240.html">SSE/SSE2 用于保存浮点控制和状态的寄存器</a></li>
  <li><code class="language-plaintext highlighter-rouge">FPCR</code> 即 X87 FPU control word。</li>
</ul>

<p>这两个寄存器状态和 <a href="https://en.wikipedia.org/wiki/Transactional_Synchronization_Extensions">Intel TSX</a> 机制有关系。TSX (Intel Transactional Synchronisation Extensions) 是 Intel 实现的硬件内存事务机制，可以粗略地理解，它使用 L1 cache 跟踪读集合和写集合，如果出现冲突的话，就放弃当前核上的修改，不把它刷到内存里面去，导致不一致。我们可以在另外一篇文章里面继续讨论内存一致性、可见性和多核系统里面乱序执行的问题。不过这里保存它们的原因是因为，如果浮点 TSX 的事务中发现浮点状态字有变化，那么这个事务肯定会<a href="https://www.boost.org/doc/libs/master/libs/fiber/doc/html/fiber/speculation.html">终止</a>。所以为了支持 TSX，Boost 也保存这些浮点寄存器。顺便说一下，内核里面是不能用浮点操作的。所以那边我们不需要关心这种问题。</p>

<p>基于这套实现，Boost 实现了自己的协程库。</p>

<p>seastar-devel 上的<a href="https://groups.google.com/g/seastar-dev/c/ncjU57iz7uk/m/7zye5ujiDAAJ">讨论</a> 也是围绕着这一点。 Christian 觉得手工实现 <code class="language-plaintext highlighter-rouge">longjmp()</code> 会比较高效。Avi 提到当初他也考虑过 <code class="language-plaintext highlighter-rouge">Boost::context</code>。因为它比较简单明了，同时没有 glibc 中 <code class="language-plaintext highlighter-rouge">_longjmp_unwind()</code> 和 <code class="language-plaintext highlighter-rouge">__sigprocmask()</code> 的开销，所以对于广大的 glibc 用户来说，使用 <code class="language-plaintext highlighter-rouge">Boost::context</code> 性能会更好一些。 不过 <code class="language-plaintext highlighter-rouge">Boost::context</code> 在 1.55/1.56 中的实现还不成熟。为了精炼版的 <code class="language-plaintext highlighter-rouge">longjmp()</code>，只能有两条路，</p>

<ol>
  <li>要求用户使用新版的 Boost</li>
  <li>把 <code class="language-plaintext highlighter-rouge">fcontext_t</code> 使用的汇编代码移植到 Seastar 里面去。</li>
</ol>

<p>不过 Avi 提到，glibc 中的 <code class="language-plaintext highlighter-rouge">longjmp()</code> 在上下文切换操作中占用的时间其实并不算多。所以就没有必要手撸汇编了。</p>


  </div><a class="u-url" href="/x86/2020/08/09/setjmp-setcontext.html" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">some random rants</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">some random rants</li><li><a class="u-email" href="mailto:tchaikov@gmail.com">tchaikov@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/tchaikov"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">tchaikov</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>我的学习记录</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
